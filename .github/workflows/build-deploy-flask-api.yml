# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run pytest --cov on all files recursively from the pytest-root-dir
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# If the workflow exits with error, an informative issue is created for the repo alerting the user
# If the workflow succeeds, a commit message is generated with the pytest --cov markdown table
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * cov-threshold-single: minimum individual file coverage required
#     * cov-threshold-total: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.3: runs pytest --cov and associated functions
#   * nashmaniac/create-issue-action@v1.1: creates issue for repo
#   * peter-evans/commit-comment@v1: adds message to commit
# **************************************************************************************************************** #

name: Build and Deploy.

on:
  push:
    branches: '*'
  pull_request:
    branches: [ development, staging, production]
  workflow_dispatch:

env:
  heroku_env: 'dev'
  heroku_app: 'back-end'

jobs:
  Build:

    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        cd api-server
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: linting
      uses: alexanderdamiani/pylinter@v1.4.2
      with:
        python-root: './api-server'
        flake8-flags: '--exclude ./api-server/api/__init__.py,./api-server/app.py'
        mypy-flags: '--ignore-missing-imports'
        fail-on-isort: false